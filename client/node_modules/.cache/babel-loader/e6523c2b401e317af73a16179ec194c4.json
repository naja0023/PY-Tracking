{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DIRECTION = Object.freeze({\n  up: -1,\n  down: 1\n});\n\nfunction isOverflowScrollable(element) {\n  var overflowType = getComputedStyle(element).overflowY;\n\n  if (element === document.scrollingElement && overflowType === \"visible\") {\n    return true;\n  }\n\n  if (overflowType !== \"scroll\" && overflowType !== \"auto\") {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns whether a given element is scrollable in a given direction.\n * This only checks this element, not any of its ancestors.\n *\n * @param {!Element} element The DOM element to check\n * @param {!number} direction The direction (see {@link DIRECTION})\n * @returns {!boolean} Whether the element is scrollable\n */\n\n\nfunction isScrollable(element, direction) {\n  if (!isOverflowScrollable(element)) {\n    return false;\n  }\n\n  if (direction === exports.DIRECTION.down) {\n    var bottomScroll = element.scrollTop + element.clientHeight;\n    return bottomScroll < element.scrollHeight;\n  }\n\n  if (direction === exports.DIRECTION.up) {\n    return element.scrollTop > 0;\n  }\n\n  throw new Error(\"unsupported direction\");\n}\n/**\n * Returns whether a given element or any of its ancestors (up to rootElement) is scrollable in a given direction.\n *\n * @param {!Element} element The leaf of the DOM tree to check\n * @param {!number} dir The direction (see {@link DIRECTION})\n * @returns {!boolean} Whether the element or one of its ancestors is scrollable.\n */\n\n\nfunction isTreeScrollable(element, dir) {\n  if (isScrollable(element, dir)) {\n    return true;\n  } // if a body is overflow: hidden, scrolling will be disabled even though scrollingElement will report that it is not.\n\n\n  if (element === document.body && getComputedStyle(document.body).overflowY === \"hidden\") {\n    return false;\n  }\n\n  if (element.parentElement == null) {\n    return false;\n  }\n\n  return isTreeScrollable(element.parentElement, dir);\n}\n\nexports.isTreeScrollable = isTreeScrollable;","map":{"version":3,"sources":["../../src/isScrollable.ts"],"names":[],"mappings":";;;;;AACa,OAAA,CAAA,SAAA,GAAY,MAAM,CAAC,MAAP,CAAc;AACnC,EAAA,EAAE,EAAE,CAAC,CAD8B;AAEnC,EAAA,IAAI,EAAE;AAF6B,CAAd,CAAZ;;AAKb,SAAS,oBAAT,CAA8B,OAA9B,EAA8C;AAC1C,MAAM,YAAY,GAAG,gBAAgB,CAAC,OAAD,CAAhB,CAA0B,SAA/C;;AACA,MAAI,OAAO,KAAK,QAAQ,CAAC,gBAArB,IAAyC,YAAY,KAAK,SAA9D,EAAyE;AACrE,WAAO,IAAP;AACH;;AAED,MAAI,YAAY,KAAK,QAAjB,IAA6B,YAAY,KAAK,MAAlD,EAA0D;AACtD,WAAO,KAAP;AACH;;AAED,SAAO,IAAP;AACH;AAED;;;;;;;AAOG;;;AACH,SAAS,YAAT,CAAsB,OAAtB,EAAwC,SAAxC,EAAyD;AAErD,MAAI,CAAC,oBAAoB,CAAC,OAAD,CAAzB,EAAoC;AAChC,WAAO,KAAP;AACH;;AAED,MAAI,SAAS,KAAK,OAAA,CAAA,SAAA,CAAU,IAA5B,EAAkC;AAC9B,QAAM,YAAY,GAAG,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC,YAAjD;AAEA,WAAO,YAAY,GAAG,OAAO,CAAC,YAA9B;AACH;;AAED,MAAI,SAAS,KAAK,OAAA,CAAA,SAAA,CAAU,EAA5B,EAAgC;AAC5B,WAAO,OAAO,CAAC,SAAR,GAAoB,CAA3B;AACH;;AAED,QAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACH;AAED;;;;;;AAMG;;;AACH,SAAgB,gBAAhB,CAAiC,OAAjC,EAAmD,GAAnD,EAA8D;AAC1D,MAAI,YAAY,CAAC,OAAD,EAAU,GAAV,CAAhB,EAAgC;AAC5B,WAAO,IAAP;AACH,GAHyD,CAK1D;;;AACA,MAAI,OAAO,KAAK,QAAQ,CAAC,IAArB,IAA6B,gBAAgB,CAAC,QAAQ,CAAC,IAAV,CAAhB,CAAgC,SAAhC,KAA8C,QAA/E,EAAyF;AACrF,WAAO,KAAP;AACH;;AAED,MAAI,OAAO,CAAC,aAAR,IAAyB,IAA7B,EAAmC;AAC/B,WAAO,KAAP;AACH;;AAED,SAAO,gBAAgB,CAAC,OAAO,CAAC,aAAT,EAAwB,GAAxB,CAAvB;AACH;;AAfD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DIRECTION = Object.freeze({\n    up: -1,\n    down: 1,\n});\nfunction isOverflowScrollable(element) {\n    var overflowType = getComputedStyle(element).overflowY;\n    if (element === document.scrollingElement && overflowType === \"visible\") {\n        return true;\n    }\n    if (overflowType !== \"scroll\" && overflowType !== \"auto\") {\n        return false;\n    }\n    return true;\n}\n/**\n * Returns whether a given element is scrollable in a given direction.\n * This only checks this element, not any of its ancestors.\n *\n * @param {!Element} element The DOM element to check\n * @param {!number} direction The direction (see {@link DIRECTION})\n * @returns {!boolean} Whether the element is scrollable\n */\nfunction isScrollable(element, direction) {\n    if (!isOverflowScrollable(element)) {\n        return false;\n    }\n    if (direction === exports.DIRECTION.down) {\n        var bottomScroll = element.scrollTop + element.clientHeight;\n        return bottomScroll < element.scrollHeight;\n    }\n    if (direction === exports.DIRECTION.up) {\n        return element.scrollTop > 0;\n    }\n    throw new Error(\"unsupported direction\");\n}\n/**\n * Returns whether a given element or any of its ancestors (up to rootElement) is scrollable in a given direction.\n *\n * @param {!Element} element The leaf of the DOM tree to check\n * @param {!number} dir The direction (see {@link DIRECTION})\n * @returns {!boolean} Whether the element or one of its ancestors is scrollable.\n */\nfunction isTreeScrollable(element, dir) {\n    if (isScrollable(element, dir)) {\n        return true;\n    }\n    // if a body is overflow: hidden, scrolling will be disabled even though scrollingElement will report that it is not.\n    if (element === document.body && getComputedStyle(document.body).overflowY === \"hidden\") {\n        return false;\n    }\n    if (element.parentElement == null) {\n        return false;\n    }\n    return isTreeScrollable(element.parentElement, dir);\n}\nexports.isTreeScrollable = isTreeScrollable;\n//# sourceMappingURL=isScrollable.js.map"]},"metadata":{},"sourceType":"script"}